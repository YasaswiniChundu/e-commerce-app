package org.jsp.ecommerce.service;

import java.util.Optional;

import org.jsp.ecommerce.dao.MerchantDao;
import org.jsp.ecommerce.dto.ResponseStructure;
import org.jsp.ecommerce.exception.IdNotFoundException;
import org.jsp.ecommerce.exception.InvalidCredentialsException;
import org.jsp.ecommerce.model.Merchant;
import org.jsp.ecommerce.util.AccountStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import jakarta.servlet.http.HttpServletRequest;
import net.bytebuddy.utility.RandomString;

@Service
public class MerchantService {

	@Autowired
	private MerchantDao dao;
	@Autowired
	private ECommerceAppEmailService emailService;
	
	public ResponseEntity<ResponseStructure<Merchant>> saveMerchant(Merchant merchant,HttpServletRequest request) {
		ResponseStructure<Merchant> structure=new ResponseStructure<>();
		merchant.setStatus(AccountStatus.IN_ACTIVE.toString());
		merchant.setToken(RandomString.make(45));
		structure.setData(dao.saveMerchant(merchant));
		String message=emailService.sendWelcomeMail(merchant,request);
		structure.setMessage("Merchant saved"+","+message);
		return new ResponseEntity<ResponseStructure<Merchant>>(structure, HttpStatus.CREATED);
	}
	
	public ResponseEntity<ResponseStructure<Merchant>> updateMerchant(Merchant m) {
		Optional<Merchant> mer=dao.findById(m.getId());
		ResponseStructure<Merchant> structure=new ResponseStructure<>();
		if(mer.isPresent()) {
			Merchant merchant=mer.get();
			merchant.setName(m.getName());
			merchant.setPhone(m.getPhone());
			merchant.setGst_number(m.getGst_number());
			merchant.setEmail(m.getEmail());
			merchant.setPassword(m.getPassword());
			structure.setMessage("Merchant updated...");
			structure.setData(dao.saveMerchant(m));
			structure.setStatusCode(HttpStatus.ACCEPTED.value());
			return new ResponseEntity<ResponseStructure<Merchant>>(structure, HttpStatus.ACCEPTED);
		}
		throw new IdNotFoundException();
	}
	
	public ResponseEntity<ResponseStructure<Merchant>> findById(int id){
		Optional<Merchant> mer=dao.findById(id);
		ResponseStructure<Merchant> structure=new ResponseStructure<>();
		if(mer.isPresent()) {
			structure.setMessage("Merchant found successful.....");
			structure.setData(mer.get());
			structure.setStatusCode(HttpStatus.OK.value());
			return new ResponseEntity<ResponseStructure<Merchant>>(structure, HttpStatus.OK);
		}
		throw new IdNotFoundException();
	}
	
	public ResponseEntity<ResponseStructure<Merchant>> verifyByPhone(long phone, String password){
		Optional<Merchant> mer=dao.verifyByPhone(phone, password);
		ResponseStructure<Merchant> structure=new ResponseStructure<>();
		if(mer.isPresent()) {
			structure.setMessage("Merchant found successful.....");
			structure.setData(mer.get());
			structure.setStatusCode(HttpStatus.OK.value());
			return new ResponseEntity<ResponseStructure<Merchant>>(structure, HttpStatus.OK);
		}
		throw new InvalidCredentialsException("Invalid phone & password");
	}
	
	public ResponseEntity<ResponseStructure<Merchant>> verifyByEmail(String email, String password){
		Optional<Merchant> mer=dao.verifyByEmail(email, password);
		ResponseStructure<Merchant> structure=new ResponseStructure<>();
		if(mer.isPresent()) {
			structure.setMessage("Merchant found successful.....");
			structure.setData(mer.get());
			structure.setStatusCode(HttpStatus.OK.value());
			return new ResponseEntity<ResponseStructure<Merchant>>(structure, HttpStatus.OK);
		}
		throw new InvalidCredentialsException("Invalid phone & password");
	}
}
